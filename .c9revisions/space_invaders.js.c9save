{"ts":1353621065493,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var DEBUG = false;\nvar ACCELEROMETER = window.DeviceMotionEvent != null;\n\nfunction randomNumber(max){\n\treturn Math.floor(Math.random() * max + 1);\n}\n\n//setup class inheritance\nFunction.prototype.inheritsFrom = function( superClass ){\n\tthis.prototype = new superClass;\n\tthis.prototype.constructor = this;\n\tthis.prototype.parent = superClass.prototype; // use this.parent.methodName.call(this[, arg]*) to call a method from the superclass\n}\n\n//x-browser event helper\nfunction addEvent(node, name, func, supressDefault) {\n\tif(node.addEventListener){\n\t\tnode.addEventListener(name, func, supressDefault);\n\t}else if(node.attachEvent) {\n\t\tnode.attachEvent(name, func);\n\t}\n}\n\n//defines a physical entity\nfunction PhysicalEntity(){\n\t//entity's mass center coordinates\n\tthis.x = 0;\n\tthis.y = 0;\n\t//entity dimensions\n\tthis.width = 0;\n\tthis.height = 0;\n}\n//update entity status\nPhysicalEntity.prototype.update = function(){\n\tif(DEBUG) console.log('updating: ' + this.constructor.name + '[width:' + this.width + ' height:' + this.height + '] at <' + this.x + ',' + this.y + '>');\n};\n//translates drawing context so that the space-box alloted for the entity's dimensions is centered on the entity's center of mass\nPhysicalEntity.prototype.paint = function(context){\n\tcontext.save();\n\tcontext.translate( this.x - Math.floor(this.width/2), this.y - Math.floor(this.height/2) );\n\tthis.draw(context);\n\tcontext.restore();\n};\n//draws the entity on screen\nPhysicalEntity.prototype.draw = function(context){\n\tif(DEBUG) console.log('drawing: ' + this.constructor.name + '[width:' + this.width + ' height:' + this.height + '] at <' + this.x + ',' + this.y + '>');\n};\n//returns true if the other entity collides with this one\nPhysicalEntity.prototype.hits = function( anotherPhysicalEntity, stop){\n    if((anotherPhysicalEntity.x - anotherPhysicalEntity.width/2) > (this.x - this.width/2)\n        && (anotherPhysicalEntity.x - anotherPhysicalEntity.width/2) <= (this.x + this.width/2)){\n        if((anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) > (this.y - this.width/2)\n            && (anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) <= (this.y + this.width/2)){\n            return true;\n        } else if ((anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) < (this.y + this.width/2)\n            && (anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) >= (this.y - this.width/2)){\n            return true;\n        }\n    } else if ((anotherPhysicalEntity.x + anotherPhysicalEntity.width/2) < (this.x + this.width/2)\n        && (anotherPhysicalEntity.x + anotherPhysicalEntity.width/2) >= (this.x - this.width/2)) {\n        if((anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) > (this.y - this.width/2)\n            && (anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) <= (this.y + this.width/2)){\n            return true;\n        } else if ((anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) < (this.y + this.width/2)\n            && (anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) >= (this.y - this.width/2)){\n            return true;\n        }\n    }\n    if(!stop)\n        return anotherPhysicalEntity.hits(this, true);\n    return false;\n};\n\n//defines a spaceship\nfunction Spaceship(){\n\tthis.x = 100;\n\tthis.y = 300;\n\tthis.width = 50;\n\tthis.height = 50;\n\tthis.counter = 0;\n    this.state = 'alive';\n    this.bearing = 0;\n    this.timeTillCooldown = -1;\n};\nSpaceship.inheritsFrom(PhysicalEntity);\n//draw the Spaceship\nSpaceship.prototype.draw = function(context){\n\t/*context.fillStyle = (this.state == 'alive' ? 'white' : 'purple');\n\tcontext.beginPath();\n\tcontext.moveTo( Math.floor(this.width)/2, 0);\n\tcontext.lineTo(this.width, this.height);\n\tcontext.lineTo(0, this.height);\n\tcontext.closePath();\n\tcontext.fill();*/\n    if(this.state == 'alive'){ \n    \tif(this.bearing == 0) context.drawImage(viewport.spaceship_image, 0, 0, this.width, this.height);\n    \telse if(this.bearing == 1) context.drawImage(viewport.spaceship_image_right, 0, 0, this.width, this.height);\n    \telse if(this.bearing == 3) context.drawImage(viewport.spaceship_image_left, 0, 0, this.width, this.height);\n    }\n    else if(this.state == 'hit'){ \n        context.fillStyle = 'blue';\n        context.drawImage(viewport.spaceship_image_hit, 0, 0, this.width, this.height);\n    }\n\tif(DEBUG) this.parent.draw.call(this, context);\n};\n//updates Spaceship\nSpaceship.prototype.update = function() {\n    //cool down laser gun\n    if(this.timeTillCooldown >= 0){\n        this.timeTillCooldown -= 1;    \n    }\n\t//reset spaceship bearing\n\tthis.bearing = 0;\n    //stop spaceship from moving if it's not 'alive'\n    if(this.state !== 'alive') return;\n\t//move left\n\tif(game.keyboard[37] || (ACCELEROMETER && game.keyboard.tiltLR > 0)){\n\t\tthis.x -= ACCELEROMETER ? Math.floor(10 * Math.abs(game.keyboard.tiltLR)): 10;\n\t\tif(this.x - Math.floor(this.width/2) < 0){\n\t\t\tthis.x = Math.floor(this.width/2);\n\t\t}\n\t\tthis.bearing = 3;\n\t}\n\t//move right\n\tif(game.keyboard[39] || (ACCELEROMETER && game.keyboard.tiltLR < 0)){\n\t\tthis.x += ACCELEROMETER ? Math.floor(10 * Math.abs(game.keyboard.tiltLR)): 10;\n\t\tif(this.x + Math.floor(this.width/2) > game.canvas.width){\n\t\t\tthis.x = game.canvas.width - Math.floor(this.width/2);\n\t\t}\n\t\tthis.bearing = 1;\n\t}\n\t//fire a laser\n\tif(game.keyboard[32] || (ACCELEROMETER && game.keyboard.tiltFB < 0)){\n\t\tif(! game.keyboard.fired){\n\t\t\tthis.fireLaser();\n\t\t\tgame.keyboard.fired = true;\n\t\t}else{\n\t\t\tgame.keyboard.fired = false;\n\t\t}\n\t}\n\tif(DEBUG) this.parent.update.call(this);\n};\n//fire a Laser\nSpaceship.prototype.fireLaser = function() {\n    //don't fire if gun has yet to cooldown\n    if(this.timeTillCooldown >= 0){\n        return;    \n    }\n\tvar laser = new Laser();\n\tlaser.x = this.x;\n\tlaser.y = this.y - Math.floor(this.height/2);\n\tlaser.state = 'hit';\n    //start laser gun cooldown\n    this.timeTillCooldown = 110;\n    //shoot!\n\tgame.lasers.push(laser);\n};\n\n//define a laser\nfunction Laser(){\n\tthis.width = 10;\n\tthis.height = 30;\n\tthis.state = 'clear';\n\tthis.counter = 0;\n};\nLaser.inheritsFrom(PhysicalEntity);\n//draw a Laser\nLaser.prototype.draw = function(context){\n\t/*context.fillStyle = (this.state == 'clear' ? 'white' : 'blue');\n\tcontext.fillRect(0, 0, this.width, this.height);*/\n    if(this.state === 'clear') context.drawImage(viewport.laser_image, 0, 0, this.width, this.height);\n    else if (this.state === 'hit') context.drawImage(viewport.laser_image_hit, 0, 0, this.width, this.height);\n};\n//update a laser\nLaser.prototype.update = function(){\n\tthis.y -= 2;\n\tfor(var i = 0; i < game.invaders.length; i++){\n\t\tif(this.hits(game.invaders[i])){\n\t\t\tthis.state = 'hit';\n\t\t\tgame.invaders[i].state = 'hit';\n\t\t\tgame.invaders[i].counter = 0;\n\t\t}\n\t}\n\tthis.resetCounter();\n};\n//reset laser state\nLaser.prototype.resetCounter = function(){\n\tif(this.state == 'hit'){\n\t\tthis.counter++;\n\t\tif(this.counter >= 20){\n\t\t\tthis.state = 'clear';\n\t\t\tthis.counter = 0;\n\t\t}\n\t}\n}\n\n//define a missile\nfunction Missile(){\n\tthis.width = 10;\n\tthis.height = 33;\n\tthis.state = 'clear';\n\tthis.counter = 0;\n};\nMissile.inheritsFrom(Laser);\n//override update\nMissile.prototype.update = function() {\n\tthis.y += 2;\n\tif(this.hits(game.spaceship)){\n\t\tthis.state = 'hit';\n\t\tgame.spaceship.state = 'hit';\n\t}\n\tthis.resetCounter();\n};\n//override draw\nMissile.prototype.draw = function(context){\n\t/*context.fillStyle = (this.state == 'clear' ? 'yellow' : 'orange');\n\tcontext.fillRect(0,0,this.width,this.height);*/\n    if(this.state === 'clear') context.drawImage(viewport.missile_image, 0, 0, this.width, this.height);\n    else if (this.state === 'hit') context.drawImage(viewport.missile_image_hit, 0, 0, this.width, this.height);\n    //else context.drawImage(viewport.missile_image, 0, 0, this.width, this.height);\n};\n\n//define a space invader\nfunction Invader(){\n\tthis.width = 40;\n\tthis.height = 40;\n\tthis.phase = Math.floor(Math.random() * 50);\n\tthis.counter = 0;\n\tthis.state = 'alive';\n};\nInvader.inheritsFrom(PhysicalEntity);\n//draw an invader\nInvader.prototype.draw = function(context){\n\t/*context.fillStyle = this.state == 'hit'? 'purple' : 'red';\n\tcontext.fillRect(0,0,this.width,this.height);*/\n    if(this.state === 'alive') context.drawImage(viewport.invader_image, 0, 0, this.width, this.height);\n    else if(this.state === 'hit'){ \n        context.fillStyle = 'purple';\n        context.drawImage(viewport.invader_image_hit, 0, 0, this.width, this.height);\n    }\n    //else context.drawImage(viewport.invader_image, 0, 0, this.width, this.height);\n};\n//update an invader\nInvader.prototype.update = function(){\n\tif(this.state == 'alive'){\n\t\tthis.counter++;\n\t}\n\t//swing right and left 3 pixels\n\tthis.x += Math.sin( this.counter * Math.PI * 2 / 100) * 3;\n\tif( (this.counter + this.phase) % 200 === 0){\n\t\tthis.fireMissile();\n\t}\n\tif(this.state == 'hit'){\n\t\tthis.counter++;\n\t\tif(this.counter >= 20){\n\t\t\tthis.state = 'dead';\n\t\t\tthis.counter = 0;\n\t\t}\n\t}\n};\n//fire missiles\nInvader.prototype.fireMissile = function (){\n\tvar missile = new Missile();\n\tmissile.x = this.x;\n\tmissile.y = this.y;\n\tmissile.state = 'hit';\n    missile.x += + (randomNumber(2) == 2 ? Math.floor(this.width/2) : -Math.floor(this.width/2) );\n\tgame.missiles.push(missile);\n};\n\n//defines a message that is displayed on screen\nfunction OnScreenMessage(titleFontSize, bodyFontSize){\n    if(!titleFontSize) titleFontSize = 40;\n    if(!bodyFontSize) bodyFontSize = 14;\n    this.x = 0;\n    this.y = 0;\n    this.counter = -1;\n    this.title = 'title';\n    this.body = 'body';\n    this.alpha = 0.5;\n    this.titleFontSizePx = titleFontSize;\n    this.bodyFontSizePx = bodyFontSize;\n    this.titleFont = 'Bold ' + titleFontSize + 'px Helvetica, Arial';\n    this.bodyFont = bodyFontSize +'px Helvetica, Arial';\n    this.titleFillStyle = 'white';\n    this.bodyFillStyle = 'white';\n};\n//draw a string on screen using context setup\nOnScreenMessage.prototype.drawText = function(context, text, fontSizePx){\n    var text2Draw = text.split('\\n');\n    this.counter += 1;\n    this.alpha = this.counter/50.0;\n    if(this.alalpha>1) this.alpha = 1;\n    context.globalAlpha = this.alpha;\n    for(var i = 0; i < text2Draw.length; i++){\n        context.translate(0, fontSizePx * i);\n        context.fillText(text2Draw[i], (game.canvas.width - context.measureText(text2Draw[i]).width)/2, 0);\n    }\n};\n//draw message on screen\nOnScreenMessage.prototype.paint = function(context){\n    context.save();\n    context.fillStyle = this.titleFillStyle;\n    context.font = this.titleFont;\n    context.translate(0, this.titleFontSizePx);\n    this.drawText(context, this.title, this.titleFontSizePx);\n    context.font = this.bodyFont;\n    context.fillStyle = this.bodyFillStyle;\n    context.translate(0, this.bodyFontSizePx);\n    this.drawText(context, this.body, this.bodyFontSizePx);\n    context.restore();\n};\n\nvar game = {\n\t//keep track of game state\n\tstate: 'start',\n\t//game speed as fps\n\tgameSpeed: 60,\n\t//reference to the canvas html element\n\tcanvas: document.getElementById('game'),\n\t//reference for html's 2d graphics context\n\tcontext: document.getElementById('game').getContext('2d'),\n\t//keyboard state\n\tkeyboard: {},\n\t//the fired lasers\n\tlasers: [],\n\t//the space invaders\n\tinvaders: [],\n\t//the invader's missiles\n\tmissiles: [],\n\t//the game's spaceship\n\tspaceship: new Spaceship(),\n    //on screen message\n    message: new OnScreenMessage(40,14),\n\t//execute update and drawing operations\n\tgameLoop: function(){\n        //update game state\n        game.update();\n\t\t//update the spaceship\n\t\tviewport.updateSpaceship();\n\t\t//update fired lasers\n\t\tviewport.updateShots();\n\t\t//update invaders\n\t\tviewport.updateInvaders();\n\t\t//clear the background before drawing game state on screen\n\t\tviewport.clearBackground();\n\t\t//draw the spaceship\n\t\tviewport.paintSpaceship();\n\t\t//draw the lasers\n\t\tviewport.paintShots();\n\t\t//draw the invaders\n\t\tviewport.paintInvaders();\n        //if there's a message, display it\n        if(game.message.counter >=0) game.message.paint(game.context);\n\t},\n    //update game state\n    update: function(){\n        if(game.spaceship.state === 'hit' && game.state === 'playing'){\n            game.state = 'over';\n            game.message.title = \"\\n\\nGame Over\";\n            game.message.body = '\\npress spacebar or tilt your phone\\nforward to play again!\\nTilt sideways to move spaceship while playing';\n            game.message.counter = 0;\n        }\n        \n        else if(game.state === 'over' && (game.keyboard[32] || (ACCELEROMETER && game.keyboard.tiltFB < 0))){\n            game.message.counter = -1;\n            viewport.startGame();    \n        }\n        \n        else if(game.state === 'playing' && game.invaders.length === 0){\n            game.state = 'won';\n            game.message.title = \"\\n\\nInvaders exterminated\";\n            game.message.body = '\\npress spacebar or tilt your phone\\nforward to play again!\\nTilt sideways to move spaceship while playing';\n            game.message.counter = 0;\n        }\n        \n        else if(game.state === 'won' && (game.keyboard[32] || (ACCELEROMETER && game.keyboard.tiltFB < 0))){\n            game.message.counter = -1;\n            viewport.startGame();\n        }\n    },\n\t//a handle to stop game execution\n\tgameLoopHandle: null,\n};\n\nvar viewport = {\n    spaceship_image: null,\n    spaceship_image_hit: null,\n    spaceship_image_left: null,\n    spaceship_image_right: null,\n    invader_image: null,\n    invader_image_hit: null,\n    laser_image: null,\n    laser_image_hit: null,\n    missile_image: null,\n    missile_image_hit: null,\n    background_image: null,\n\t//fills the background with black\n\tclearBackground: function(){\n\t\tgame.context.drawImage(viewport.background_image, 0, 0, game.canvas.width, game.canvas.height);\n\t},\n\t//paints a spaceship\n\tpaintSpaceship: function() {\n\t\tgame.spaceship.paint(game.context);\n\t},\n\t//updates the spaceship\n\tupdateSpaceship: function(){\n\t\tgame.spaceship.update();\n\t},\n\tpaintShots: function(){\n\t\tvar i;\n        for(i = 0; i < game.lasers.length; i++){\n\t\t\tgame.lasers[i].paint(game.context);\n\t\t}\n\t\tfor(i = 0; i < game.missiles.length; i++){\n\t\t\tgame.missiles[i].paint(game.context);\n\t\t}\n\t},\n\t//updates the lasers\n\tupdateShots: function(){\n        var i;\n\t\tfor(i = 0; i < game.lasers.length; i++){\n\t\t\tgame.lasers[i].update();\n\t\t}\n\t\tfor(i = 0; i < game.missiles.length; i++){\n\t\t\tgame.missiles[i].update();\n\t\t}\n\t\t//remove lasers that are out of the viewport\n\t\tgame.lasers = game.lasers.filter(function(laser){\n\t\t\treturn laser.y > 0 && laser.y < game.canvas.height;\n\t\t});\n\t\t//remove missiles no longer within the viewport\n\t\tgame.missiles = game.missiles.filter(function(missile){\n\t\t\treturn missile.y > 0 && missile.y < game.canvas.height;\n\t\t});\n\t},\n\t//paint invaders\n\tpaintInvaders: function(){\n\t\tfor(var i =0; i < game.invaders.length; i++){\n\t\t\tgame.invaders[i].paint(game.context);\n\t\t}\n\t},\n\t//update invaders\n\tupdateInvaders: function(){\n\t\tfor(var i =0; i < game.invaders.length; i++){\n\t\t\tgame.invaders[i].update();\n\t\t}\n\t\tgame.invaders = game.invaders.filter(function(invader){ return invader.state != 'dead'; });\n\t},\n\t//initializes game content\n\tstartGame: function(){\n        //clear remaining invaders\n\t\tgame.invaders = [];\n        //reset game state\n        game.state = 'playing';\n        //reset spaceship state\n        game.spaceship.state = 'alive';\n        //create invaders\n        viewport.populateInvaderRow(0);\n\t},\n\t//create a line of invaders\n\tpopulateInvaderRow: function(rowNumber){\n\t\tif(!rowNumber || rowNumber === null){\n\t\t\trowNumber = 0;\n\t\t}\n\t\tfor(var i = 0; i < 10; i++){\n\t\t\tvar invader = new Invader();\n\t\t\tinvader.x = (rowNumber % 2 === 0 ? 30 : 40) + ( i * 50);\n\t\t\tinvader.y = 30 + (rowNumber * 50);\n\t\t\tinvader.counter = rowNumber % 2 === 0 ? 0 : 90;\n\t\t\tgame.invaders.push(invader);\n\t\t}\n\t},\n    //handle keydown events\n    onKeyDown: function(e){\n        game.keyboard[e.keyCode] = true;\n    },\n    //handle keyup events\n    onKeyup: function(e) {\n        game.keyboard[e.keyCode] = false;\n    },\n    //handle device motion events\n    onDeviceMoved: function(e){\n        //inhibit default behavior\n        e.preventDefault();\n        //calculate device state\n        game.keyboard.acceleration = e.accelerationIncludingGravity;\n\t\tgame.keyboard.facingUp = -1;\n\t\tif (game.keyboard.acceleration.z > 0) {\n\t\t\tgame.keyboard.facingUp = +1;\n\t\t}\n        //save device state\n        //0 degrees means the device is leveled\n        //a positive angle follows counter clockwise movement (tilt left)\n        //40 degrees is max allowed right-left tilt\n\t\tgame.keyboard.tiltLR = Math.round(((game.keyboard.acceleration.x) / 9.81) * -90)/40; \n\t\t//0 degrees is portrait mode, while -180 means device is upside down\n        // -90 degrees marks the 'belly up' position. This angle will be negative as long the device is still facing upwards\n        // 30 degrees is the max allowed forth-back tilt\n        game.keyboard.tiltFB = Math.round(((game.keyboard.acceleration.y + 9.81) / 9.81) * 90 * game.keyboard.facingUp);\n        if(game.keyboard.tiltFB < -90){ // closer to -180 means device is going upside down\n            game.keyboard.tiltFB = game.keyboard.tiltFB/120; // -30 away from -90 degrees is maximum allowed forwards tilt\n        }else if (game.keyboard.tiltFB > -90){ // closer to 0 means device is going into portrait mode\n            game.keyboard.tiltFB = Math.abs(game.keyboard.tiltFB+90)/60; // 30 away from -90 degrees is maximum allowed backwards tilt\n        }\n    },\n\t//registers keyboard events\n\taddKeyboardEvents: function() {\n\t\taddEvent(document, 'keydown', function(e){\n\t\t\tviewport.onKeyDown(e);\n\t\t}, true);\n\t\taddEvent(document, 'keyup', function(e){\n\t\t\tviewport.onKeyup(e);\n\t\t}, true);\n        if(ACCELEROMETER){\n            window.addEventListener('devicemotion',viewport.onDeviceMoved,true);    \n        }\n\t},\n    //draw messages on the screen\n    drawMessages: function(){\n        \n    },\n    //load media assets\n    loadResources: function(){\n        //load background image\n        viewport.background_image = new Image();\n        viewport.background_image.src = 'images/background-01.png';\n        //load spaceship-still image\n        viewport.spaceship_image = new Image();\n        viewport.spaceship_image.src = 'images/spaceship-01.png';\n        //load spaceship-hit image\n        viewport.spaceship_image_hit = new Image();\n        viewport.spaceship_image_hit.src = 'images/spaceship-hit-01.png';\n        //load spaceship-left image\n        viewport.spaceship_image_left = new Image();\n        viewport.spaceship_image_left.src = 'images/spaceship-left-01.png';\n        //load spaceship-right image\n        viewport.spaceship_image_right = new Image();\n        viewport.spaceship_image_right.src = 'images/spaceship-right-01.png';\n        //load laser image\n        viewport.laser_image = new Image();\n        viewport.laser_image.src = 'images/laser-01.png';\n        //load laser hit image\n        viewport.laser_image_hit = new Image();\n        viewport.laser_image_hit.src = 'images/laser-xplode-01.png';\n        //load invader image\n        viewport.invader_image = new Image();\n        viewport.invader_image.src = 'images/invader-01.png';\n        //load invader hit image\n        viewport.invader_image_hit = new Image();\n        viewport.invader_image_hit.src = 'images/invader-01.png';\n        //load missile image\n        viewport.missile_image = new Image();\n        viewport.missile_image.src = 'images/missile-01.png';\n        //load missile hit image\n        viewport.missile_image_hit = new Image();\n        viewport.missile_image_hit.src = 'images/missile-xplode-01.png';\n    },\n};\n\n//setup game controls\nviewport.addKeyboardEvents();\n//initialize game content\nviewport.loadResources();\nviewport.startGame();\n//make sure game loop gets run at a 60pfs rate\ngame.gameLoopHandle = setInterval(game.gameLoop, 1000/game.gameSpeed);\n"]],"start1":0,"start2":0,"length1":0,"length2":19731}]],"length":19731}
{"contributors":[],"silentsave":false,"ts":1353621099453,"patch":[[{"diffs":[[0,"ve left\n"],[1,"    if(game.keyboard[37]){\n        alert('left');\n    }\n"],[0,"\tif(game"]],"start1":4653,"start2":4653,"length1":16,"length2":72},{"diffs":[[0,"e right\n"],[1,"    if(game.keyboard[37]){\n        alert('right');\n    }\n"],[0,"\tif(game"]],"start1":4985,"start2":4985,"length1":16,"length2":73}]],"length":19844,"saved":false}
{"ts":1353621157440,"patch":[[{"diffs":[[0,"(game.keyboard[3"],[-1,"7"],[1,"9"],[0,"]){\n        aler"]],"start1":4999,"start2":4999,"length1":33,"length2":33}]],"length":19844,"saved":false}
{"ts":1353621242842,"patch":[[{"diffs":[[0,"eft\n"],[-1,"    if(game.keyboard[37]){\n        alert('left');\n    }\n"],[0,"\tif("]],"start1":4657,"start2":4657,"length1":64,"length2":8},{"diffs":[[0," 3;\n"],[-1,"\t}\n\t//move right\n"],[1,"  "],[0,"    "],[1,"  "],[0,"if(g"]],"start1":4916,"start2":4916,"length1":29,"length2":16},{"diffs":[[0,"yboard[3"],[-1,"9"],[1,"7"],[0,"]){\n    "]],"start1":4938,"start2":4938,"length1":17,"length2":17},{"diffs":[[0,"    "],[1," "],[1,"   "],[0,"alert('"],[-1,"right');\n    }"],[1,"left '+ACCELEROMETER);\n        }\n\t}\n\t//move right"],[0,"\n\tif"]],"start1":4955,"start2":4955,"length1":29,"length2":68},{"diffs":[[0,"ing = 1;"],[-1,""],[0,""],[1,"\n        if(game.keyboard[39]){\n            alert('right '+ACCELEROMETER);\n        }"],[0,"\n\t}\n\t//f"]],"start1":5306,"start2":5306,"length1":16,"length2":100}]],"length":19898,"saved":false}
{"ts":1353621339076,"patch":[[{"diffs":[[0," 3;\n"],[-1,"        if(game.keyboard[37]){\n            alert('left '+ACCELEROMETER);\n        }\n"],[0,"\t}\n\t"]],"start1":4916,"start2":4916,"length1":91,"length2":8},{"diffs":[[0," 1;\n"],[-1,"        if(game.keyboard[39]){\n            alert('right '+ACCELEROMETER);\n        }\n"],[0,"\t}\n\t"]],"start1":5228,"start2":5228,"length1":92,"length2":8}]],"length":19731,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376570177891,"patch":[[{"diffs":[[0,"!= null;"],[1,"\nvar RELATIVE_MEDIA_PREFIX = '';"],[0,"\n\nfuncti"]],"start1":64,"start2":64,"length1":16,"length2":48},{"diffs":[[0,"r(max){\n"],[-1,"\t"],[1,"    "],[0,"return M"]],"start1":126,"start2":126,"length1":17,"length2":20},{"diffs":[[0,"ht = 0;\n"],[1,"\tthis.moving = false;\n"],[0,"}\n//upda"]],"start1":868,"start2":868,"length1":16,"length2":38},{"diffs":[[0,"n(){\n\tif(DEBUG) "],[-1,""],[0,""],[1,"if( DEBUG ) "],[0,"console.log('upd"]],"start1":964,"start2":964,"length1":32,"length2":44},{"diffs":[[0,"f(DEBUG)"],[1," if( DEBUG )"],[0," console"]],"start1":1557,"start2":1557,"length1":16,"length2":28},{"diffs":[[0,";\n//"],[-1,"returns true if the o"],[1,"builds coordinates for a bounding rectangle around "],[0,"the"],[-1,"r"],[0," entity"],[1,"s"],[0," c"],[-1,"ollides with this one"],[1,"enter of mass"],[0,"\nPhy"]],"start1":1722,"start2":1722,"length1":63,"length2":85},{"diffs":[[0,"ototype."],[-1,"hit"],[1,"updateBound"],[0,"s = func"]],"start1":1821,"start2":1821,"length1":19,"length2":27},{"diffs":[[0,"on( "],[-1,"anotherPhysicalEntity, stop){\n    if((anotherPhysicalEntity.x - anotherPhysicalEntity.width/2) > (this.x - this.width/2)\n        && (anotherPhysicalEntity.x - anotherPhysicalEntity.width/2) <= (this.x + this.width/2)){\n        if((anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) > (this.y - this.width/2)\n            && (anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) <= (this.y + this.width/2)){\n            "],[1,"){\n\tif( this.moving ){\n\t\tthis._left  =(this.x - this.width/2);\n\t\tthis._right =(this.x + this.width/2);\n\t\tthis._top   =(this.y - this.height/2);\n\t\tthis._bottom=(this.y + this.height/2);\n\t}\n}\n//"],[0,"return"],[1,"s"],[0," true"],[-1,";\n        } else if ((anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) < (this.y + this.width/2)\n            && (anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) >= (this.y - this.width/2)){\n            return true;\n        }\n    } else if ((anotherPhysicalEntity.x + anotherPhysicalEntity.width/2) < (this.x + this.width/2)\n        && (anotherPhysicalEntity.x + anotherPhysicalEntity.width/2) >= (this.x - this.width/2)) {\n        if((anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) > (this.y - this.width/2)\n            && (anotherPhysicalEntity.y - anotherPhysicalEntity.width/2) <= (this.y + this.width/2)){\n            return true;\n        } else if (("],[1," if the other entity collides with this one\nPhysicalEntity.prototype.hits = function( anotherPhysicalEntity, stop ){\n\tthis.updateBounds( );\n\tanotherPhysicalEntity.updateBounds( );\n\tif ( \n\t\t\t( this._left >= anotherPhysicalEntity._left && this._left <= anotherPhysicalEntity._right ) \n\t\t\t|| ( this._right >= anotherPhysicalEntity._left && this._right <= anotherPhysicalEntity._right ) \n\t\t){\n\t\t\treturn (\n\t\t\t\t( this._top >= "],[0,"anot"]],"start1":1850,"start2":1850,"length1":1129,"length2":632},{"diffs":[[0,"rPhysicalEntity."],[-1,"y +"],[1,"_top && this._top <="],[0," anotherPhysical"]],"start1":2484,"start2":2484,"length1":35,"length2":52},{"diffs":[[0,"ity."],[-1,"width/2) < (this.y + this.width/2)\n            && (anotherPhysicalEntity.y + anotherPhysicalEntity.width/2) >= (this.y - this.width/2)){\n            return true;\n        }\n    }\n    if(!stop)\n        return"],[1,"_bottom )\n\t\t\t\t|| ( this._bottom >= anotherPhysicalEntity._top && this._bottom <="],[0," ano"]],"start1":2539,"start2":2539,"length1":214,"length2":88},{"diffs":[[0,"ity."],[-1,"hits(this, true);\n    "],[1,"_bottom )\n\t\t\t);\n\t}\n\t"],[0,"retu"]],"start1":2642,"start2":2642,"length1":30,"length2":28},{"diffs":[[0,"und_image.src = "],[-1,""],[0,""],[1,"RELATIVE_MEDIA_PREFIX + "],[0,"'images/backgrou"]],"start1":17433,"start2":17433,"length1":32,"length2":56},{"diffs":[[0,"ship_image.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/spacesh"]],"start1":17608,"start2":17608,"length1":32,"length2":56},{"diffs":[[0,"_image_hit.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/spacesh"]],"start1":17789,"start2":17789,"length1":32,"length2":56},{"diffs":[[0,"e_left.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/spa"]],"start1":17981,"start2":17981,"length1":24,"length2":48},{"diffs":[[0,"_right.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/spa"]],"start1":18173,"start2":18173,"length1":24,"length2":48},{"diffs":[[0,"aser_image.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/laser-0"]],"start1":18332,"start2":18332,"length1":32,"length2":56},{"diffs":[[0,"_image_hit.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/laser-x"]],"start1":18497,"start2":18497,"length1":32,"length2":56},{"diffs":[[0,"ader_image.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/invader"]],"start1":18663,"start2":18663,"length1":32,"length2":56},{"diffs":[[0,"_image_hit.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/invader"]],"start1":18836,"start2":18836,"length1":32,"length2":56},{"diffs":[[0,"_image.src ="],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images/mis"]],"start1":19001,"start2":19001,"length1":24,"length2":48},{"diffs":[[0,"it.src ="],[-1,""],[0,""],[1," RELATIVE_MEDIA_PREFIX +"],[0," 'images"]],"start1":19178,"start2":19178,"length1":16,"length2":40}]],"length":19498,"saved":false}
{"ts":1376570693149,"patch":[[{"diffs":[[0,"is._top "],[-1,">"],[1,"<"],[0,"= anothe"]],"start1":2467,"start2":2467,"length1":17,"length2":17},{"diffs":[[0,"op && this._"],[-1,"top <"],[1,"bottom >"],[0,"= anotherPhy"]],"start1":2502,"start2":2502,"length1":29,"length2":32},{"diffs":[[0,"icalEntity._"],[-1,"bot"],[0,"to"],[-1,"m"],[1,"p"],[0," )\n\t\t\t\t|| ( "]],"start1":2535,"start2":2535,"length1":30,"length2":27},{"diffs":[[0,"\t\t\t\t|| ("],[1," "],[0," this._"],[-1,"bottom >"],[1,"top <"],[0,"= anothe"]],"start1":2553,"start2":2553,"length1":31,"length2":29},{"diffs":[[0,"PhysicalEntity._"],[1,"bot"],[0,"to"],[-1,"p"],[1,"m"],[0," && this._bottom"]],"start1":2583,"start2":2583,"length1":35,"length2":38},{"diffs":[[0,"_bottom "],[-1,"<"],[1,">"],[0,"= anothe"]],"start1":2614,"start2":2614,"length1":17,"length2":17}]],"length":19499,"saved":false}
{"ts":1376570983391,"patch":[[{"diffs":[[0,"s._left "],[-1,">"],[1,"<"],[0,"= anothe"]],"start1":2253,"start2":2253,"length1":17,"length2":17},{"diffs":[[0,"ft && this._"],[-1,"left <"],[1,"right >"],[0,"= anotherPhy"]],"start1":2289,"start2":2289,"length1":30,"length2":31},{"diffs":[[0,"icalEntity._"],[-1,"righ"],[1,"lef"],[0,"t ) \n\t\t\t|| ("]],"start1":2321,"start2":2321,"length1":28,"length2":27},{"diffs":[[0,"\t|| ( this._"],[-1,"right >"],[1,"left <"],[0,"= anotherPhy"]],"start1":2343,"start2":2343,"length1":31,"length2":30},{"diffs":[[0,"PhysicalEntity._"],[-1,"lef"],[1,"righ"],[0,"t && this._right"]],"start1":2370,"start2":2370,"length1":35,"length2":36},{"diffs":[[0,"._right "],[-1,"<"],[1,">"],[0,"= anothe"]],"start1":2399,"start2":2399,"length1":17,"length2":17},{"diffs":[[0,"\t\t\t\t( this._"],[-1,"top <"],[1,"bottom >"],[0,"= anotherPhy"]],"start1":2459,"start2":2459,"length1":29,"length2":32},{"diffs":[[0,"op && this._"],[-1,"bottom >"],[1,"top <"],[0,"= anotherPhy"]],"start1":2505,"start2":2505,"length1":32,"length2":29}]],"length":19499,"saved":false}
