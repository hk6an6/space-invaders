{"ts":1352217709407,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var DEBUG = false;\n\n//setup class inheritance\nFunction.prototype.inheritsFrom = function( superClass ){\n\tthis.prototype = new superClass;\n\tthis.prototype.constructor = this;\n\tthis.prototype.parent = superClass.prototype; // use this.parent.methodName.call(this[, arg]*) to call a method from the superclass\n}\n\n//x-browser event helper\nfunction addEvent(node, name, func, supressDefault) {\n\tif(node.addEventListener){\n\t\tnode.addEventListener(name, func, supressDefault);\n\t}else if(node.attachEvent) {\n\t\tnode.attachEvent(name, func);\n\t}\n}\n\n//defines a physical entity\nfunction PhysicalEntity(){\n\t//entity's mass center coordinates\n\tthis.x = 0;\n\tthis.y = 0;\n\t//entity dimensions\n\tthis.width = 0;\n\tthis.height = 0;\n}\n//update entity status\nPhysicalEntity.prototype.update = function(){\n\tif(DEBUG) console.log('updating: ' + this.constructor.name + '[width:' + this.width + ' height:' + this.height + '] at <' + this.x + ',' + this.y + '>');\n};\n//translates drawing context so that the space-box alloted for the entity's dimensions is centered on the entity's center of mass\nPhysicalEntity.prototype.paint = function(context){\n\tcontext.save();\n\tcontext.translate( this.x - Math.floor(this.width/2), this.y - Math.floor(this.height/2) );\n\tthis.draw(context);\n\tcontext.restore();\n};\n//draws the entity on screen\nPhysicalEntity.prototype.draw = function(context){\n\tif(DEBUG) console.log('drawing: ' + this.constructor.name + '[width:' + this.width + ' height:' + this.height + '] at <' + this.x + ',' + this.y + '>');\n}\n//returns true if the other entity collides with this one\nPhysicalEntity.prototype.hits = function( anotherPhysicalEntity ){\n\tvar distance = Math.sqrt( Math.pow(this.x - anotherPhysicalEntity.x, 2) + Math.pow(this.y - anotherPhysicalEntity.y, 2) );\n\treturn (distance <= this.width/2 && distance <= this.height/2) \n\t\t\t|| (distance <= anotherPhysicalEntity.width/2 && distance <= anotherPhysicalEntity.height/2);\n}\n\n//defines a spaceship\nfunction Spaceship(){\n\tthis.x = 100;\n\tthis.y = 300;\n\tthis.width = 50;\n\tthis.height = 50;\n\tthis.counter = 0;\n}\nSpaceship.inheritsFrom(PhysicalEntity);\n//draw the Spaceship\nSpaceship.prototype.draw = function(context){\n\tcontext.fillStyle = '#FFFFFF';\n\tcontext.beginPath();\n\tcontext.moveTo( Math.floor(this.width)/2, 0);\n\tcontext.lineTo(this.width, this.height);\n\tcontext.lineTo(0, this.height);\n\tcontext.closePath();\n\tcontext.fill();\n\tif(DEBUG) this.parent.draw.call(this, context);\n}\n//updates Spaceship\nSpaceship.prototype.update = function() {\n\t//move left\n\tif(game.keyboard[37]){\n\t\tthis.x -= 10;\n\t\tif(this.x - Math.floor(this.width/2) < 0){\n\t\t\tthis.x = Math.floor(this.width/2);\n\t\t}\n\t}\n\t//move right\n\tif(game.keyboard[39]){\n\t\tthis.x += 10;\n\t\tif(this.x + Math.floor(this.width/2) > game.canvas.width){\n\t\t\tthis.x = game.canvas.width - Math.floor(this.width/2);\n\t\t}\n\t}\n\t//fire a laser\n\tif(game.keyboard[32]){\n\t\tif(! game.keyboard.fired){\n\t\t\tthis.fireLaser();\n\t\t\tgame.keyboard.fired = true;\n\t\t}else{\n\t\t\tgame.keyboard.fired = false;\n\t\t}\n\t}\n\tif(DEBUG) this.parent.update.call(this);\n}\n//fire a Laser\nSpaceship.prototype.fireLaser = function() {\n\tvar laser = new Laser();\n\tlaser.x = this.x;\n\tlaser.y = this.y - Math.floor(this.height/2);\n\tgame.lasers.push(laser);\n}\n\n//define a laser\nfunction Laser(){\n\tthis.width = 10;\n\tthis.height = 30;\n\tthis.state = 'clear';\n}\nLaser.inheritsFrom(PhysicalEntity);\n//draw a Laser\nLaser.prototype.draw = function(context){\n\tcontext.fillStyle = 'white';\n\tcontext.fillRect(0, 0, this.width, this.height);\n}\n//update a laser\nLaser.prototype.update = function(){\n\tthis.y -= 2;\n\tfor(var i = 0; i < game.invaders.length; i++){\n\t\tif(this.hits(game.invaders[i])){\n\t\t\tthis.state = 'hit';\n\t\t\tgame.invaders[i].state = 'hit';\n\t\t\tgame.invaders[i].counter = 0;\n\t\t}\n\t}\n}\n\n//define a missile\nfunction Missile(){\n\tthis.width = 10;\n\tthis.height = 33;\n\tthis.state = 'clear';\n}\nMissile.inheritsFrom(Laser);\n//override update\nMissile.prototype.update = function() {\n\tthis.y += 2;\n\tif(this.hits(game.spaceship)){\n\t\tthis.state = 'hit';\n\t\tgame.spaceship.state = 'hit';\n\t}\n}\n//override draw\nMissile.prototype.draw = function(context){\n\tcontext.fillStyle = 'yellow';\n\tcontext.fillRect(0,0,this.width,this.height);\n}\n\n//define a space invader\nfunction Invader(){\n\tthis.width = 40;\n\tthis.height = 40;\n\tthis.phase = Math.floor(Math.random() * 50);\n\tthis.counter = 0;\n\tthis.state = 'alive';\n}\nInvader.inheritsFrom(PhysicalEntity);\n//draw an invader\nInvader.prototype.draw = function(context){\n\tcontext.fillStyle = this.state == 'hit'? 'purple' : 'red';\n\tcontext.fillRect(0,0,this.width,this.height);\n}\n//update an invader\nInvader.prototype.update = function(){\n\tif(this.state == 'alive'){\n\t\tthis.counter++;\n\t}\n\t//swing right and left 3 pixels\n\tthis.x += Math.sin( this.counter * Math.PI * 2 / 100) * 3;\n\tif( (this.counter + this.phase) % 200 == 0){\n\t\tthis.fireMissile();\n\t}\n\tif(this.state == 'hit'){\n\t\tthis.counter++;\n\t\tif(this.counter >= 20){\n\t\t\tthis.state = 'dead';\n\t\t\tthis.counter = 0;\n\t\t}\n\t}\n}\n//fire missiles\nInvader.prototype.fireMissile = function (){\n\tvar missile = new Missile();\n\tmissile.x = this.x;\n\tmissile.y = this.y;\n\tgame.missiles.push(missile);\n}\n\nvar game = {\n\t//keep track of game state\n\tstate: 'start',\n\t//game speed as fps\n\tgameSpeed: 60,\n\t//reference to the canvas html element\n\tcanvas: document.getElementById('game'),\n\t//reference for html's 2d graphics context\n\tcontext: document.getElementById('game').getContext('2d'),\n\t//keyboard state\n\tkeyboard: {},\n\t//the fired lasers\n\tlasers: [],\n\t//the space invaders\n\tinvaders: [],\n\t//the invader's missiles\n\tmissiles: [],\n\t//the game's spaceship\n\tspaceship: new Spaceship(),\n\t//execute update and drawing operations\n\tgameLoop: function(){\n\t\t//update the spaceship\n\t\tviewport.updateSpaceship();\n\t\t//update fired lasers\n\t\tviewport.updateShots();\n\t\t//update invaders\n\t\tviewport.updateInvaders();\n\t\t//clear the background before drawing game state on screen\n\t\tviewport.clearBackground();\n\t\t//draw the spaceship\n\t\tviewport.paintSpaceship();\n\t\t//draw the lasers\n\t\tviewport.paintShots();\n\t\t//draw the invaders\n\t\tviewport.paintInvaders();\n\t},\n\t//a handle to stop game execution\n\tgameLoopHandle: null,\n};\n\nvar viewport = {\n\t//fills the background with black\n\tclearBackground: function(){\n\t\tgame.context.fillStyle = '#000000';\n\t\tgame.context.fillRect(0,0,game.canvas.width,game.canvas.height);\n\t},\n\t//paints a spaceship\n\tpaintSpaceship: function() {\n\t\tgame.spaceship.paint(game.context);\n\t},\n\t//updates the spaceship\n\tupdateSpaceship: function(){\n\t\tgame.spaceship.update();\n\t},\n\tpaintShots: function(){\n\t\tfor(var i = 0; i < game.lasers.length; i++){\n\t\t\tgame.lasers[i].paint(game.context);\n\t\t}\n\t\tfor(var i = 0; i < game.missiles.length; i++){\n\t\t\tgame.missiles[i].paint(game.context);\n\t\t}\n\t},\n\t//updates the lasers\n\tupdateShots: function(){\n\t\tfor(var i = 0; i < game.lasers.length; i++){\n\t\t\tgame.lasers[i].update();\n\t\t}\n\t\tfor(var i = 0; i < game.missiles.length; i++){\n\t\t\tgame.missiles[i].update();\n\t\t}\n\t\t//remove lasers that are out of the viewport\n\t\tgame.lasers = game.lasers.filter(function(laser){\n\t\t\treturn laser.y > 0 && laser.y < game.canvas.height;\n\t\t});\n\t\t//remove missiles no longer within the viewport\n\t\tgame.missiles = game.missiles.filter(function(missile){\n\t\t\treturn missile.y > 0 && missile.y < game.canvas.height;\n\t\t});\n\t},\n\t//paint invaders\n\tpaintInvaders: function(){\n\t\tfor(var i =0; i < game.invaders.length; i++){\n\t\t\tgame.invaders[i].paint(game.context);\n\t\t}\n\t},\n\t//update invaders\n\tupdateInvaders: function(){\n\t\tfor(var i =0; i < game.invaders.length; i++){\n\t\t\tgame.invaders[i].update();\n\t\t}\n\t\tgame.invaders = game.invaders.filter(function(invader){ return invader.state != 'dead'; });\n\t},\n\t//initializes game content\n\tstartGame: function(){\n\t\t\n\t},\n\t//create a line of invaders\n\tpopulateInvaderRow: function(rowNumber){\n\t\tif(!rowNumber || rowNumber == null){\n\t\t\trowNumber = 0;\n\t\t}\n\t\tfor(var i = 0; i < 10; i++){\n\t\t\tvar invader = new Invader();\n\t\t\tinvader.x = (rowNumber % 2 == 0 ? 30 : 40) + ( i * 50);\n\t\t\tinvader.y = 30 + (rowNumber * 50);\n\t\t\tinvader.counter = rowNumber % 2 == 0 ? 0 : 90;\n\t\t\tgame.invaders.push(invader);\n\t\t}\n\t},\n\t//registers keyboard events\n\taddKeyboardEvents: function() {\n\t\taddEvent(document, 'keydown', function(e){\n\t\t\tgame.keyboard[e.keyCode] = true;\n\t\t}, true);\n\t\taddEvent(document, 'keyup', function(e){\n\t\t\tgame.keyboard[e.keyCode] = false;\n\t\t}, true);\n\t},\n};\n\n//setup game controls\nviewport.addKeyboardEvents();\n//initialize game content\nviewport.startGame();\nviewport.populateInvaderRow(0);\nviewport.populateInvaderRow(1);\n//make sure game loop gets run at a 60pfs rate\ngame.gameLoopHandle = setInterval(game.gameLoop, 1000/game.gameSpeed);\n"]],"start1":0,"start2":0,"length1":0,"length2":8591}]],"length":8591}
{"contributors":[],"silentsave":false,"ts":1352218256922,"patch":[[{"diffs":[[0,"tion(){\n"],[-1,"\t\t"],[1,"        //clear remaining invaders\n\t\tgame.invaders = [];\n        //reset game state\n        game.state = 'started';\n        //reset spaceship state\n        game.spaeceship.state = 'alive';"],[0,"\n\t},\n\t//"]],"start1":7657,"start2":7657,"length1":18,"length2":204}]],"length":8777,"saved":false}
{"ts":1352218598842,"patch":[[{"diffs":[[0,"false;\n\n"],[1,"function randomNumber(max){\n\treturn Math.floor(Math.random() * max + 1);\n}\n\n"],[0,"//setup "]],"start1":12,"start2":12,"length1":16,"length2":92},{"diffs":[[0,"= this.x"],[1," + (randomNumber(2) == 2 ? Math.floor(this.width/2) : -Math.floor(this.width/2) )"],[0,";\n\tmissi"]],"start1":5123,"start2":5123,"length1":16,"length2":97}]],"length":8934,"saved":false}
{"ts":1352218689704,"patch":[[{"diffs":[[0,"er = 0;\n"],[1,"    this.state = 'alive';\n"],[0,"}\nSpaces"]],"start1":2124,"start2":2124,"length1":16,"length2":42}]],"length":8960,"saved":false}
{"ts":1352218726185,"patch":[[{"diffs":[[0,"game.spa"],[-1,"e"],[0,"ceship.s"]],"start1":8004,"start2":8004,"length1":17,"length2":16}]],"length":8959,"saved":false}
{"ts":1352219013070,"patch":[[{"diffs":[[0,"= this.x"],[1,";\n\tmissile.y = this.y;\n    missile.x +="],[0," + (rand"]],"start1":5149,"start2":5149,"length1":16,"length2":55},{"diffs":[[0,"h/2) );\n"],[-1,"\tmissile.y = this.y;\n"],[0,"\tgame.mi"]],"start1":5271,"start2":5271,"length1":37,"length2":16}]],"length":8977,"saved":false}
{"ts":1352219177000,"patch":[[{"diffs":[[0,"e = "],[-1,"'#FFFFFF'"],[1,"(this.state == 'alive' ? 'white' : 'purple')"],[0,";\n\tc"]],"start1":2284,"start2":2284,"length1":17,"length2":52}]],"length":9012,"saved":false}
{"ts":1352219283830,"patch":[[{"diffs":[[0,"Style = "],[-1,"'white'"],[1,"(this.state == 'clear' ? 'white' : 'blue')"],[0,";\n\tconte"]],"start1":3550,"start2":3550,"length1":23,"length2":58},{"diffs":[[0,"e = "],[-1,"'yellow'"],[1,"(this.state == 'clear' ? 'yellow' : 'orange')"],[0,";\n\tc"]],"start1":4276,"start2":4276,"length1":16,"length2":53}]],"length":9084,"saved":false}
